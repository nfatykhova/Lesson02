package ru.levelp;

/**
 * Created by natalie on 21.02.16.
 */

/* бит может быть 1 и 0, это 2 значения - разобраться, почему байт = 8 бит, а степень 7
отличаются только диапазоны и применение

float - плавающая точка (1.4е-45 :: 3.4е+38)
byte - целочисленный тип (-2^7 :: 2^7-1)  0b11111111 мах число байт (128). исп для работы с файлами
short - целочисленный тип (-2^16 :: 2^16-1) редко используется
long - целочисленный тип (-2^63 :: 2^63-1)
int - целочисленный тип (-2^31 :: 2^31-1)
string - строки (символьный тип, хранит столько char, сколько позволяет хранить ОП вашего компьютера)
         оптимизация строк "ааа -> а3"
double - плавающая точка (-4,9e-324 :: 1,7e+308) 325 знаков после запятой
boolean - true / false
char - unicode (0 :: 65535) + может быть отрицательным (-32768 :: 32767)
       отсортировать список контактов по алфавиту:
       'A' < 'B' преобразуется в числа и сортируется
 */

public class Main {
    public static void main(String[] args) {
        boolean a = true;
        boolean b = false;

        a = b;

        System.out.println(a);

        a = !a; // отрицание или инвертирование

        System.out.println(a);

        System.out.println(a == b); // == сравнение, true если равны
        System.out.println(a != b); // != сравнение, true если НЕ равны

        int x = 7;
        int y = 2;

        // операции >, <, >=, <=, ==, != возвращают boolean значения

        boolean result = !(x > y) == b; // инвертируем выражение
        System.out.println("result " + result);

        /* if (логич выражение) {
            действие при условие=true }
        */

        b = true;
        if (b) {  // логическое выражение или переменная, равная true
            System.out.println("b = true");
        }
        // остальной код

        /* Задание
        даны 3 целые числа
        используя блоки if и сравнения найти минимальное значение
         */

        int a1 = 6;
        int b1 = 2;
        int c1 = -30;

        int min1 = a1;
        if (b1 < min1) {
            min1 = b1;
        }
        if (c1 < min1) {
            min1 = c1;
        }
        System.out.println("min = " + min1);

        // блок else

        if (a1 > b1) {
            System.out.println("min = " + b1);
        } else {
            System.out.println("min = " + a1);
        }

 //       if (5 > 1) {
 //           System.out.println("if block");
 //           if (cond) {
 //               if () {}
 //               else {}
 //           }
 //           else if (4 > 1) ...
 //       }

        if (a1 < b1) {
            System.out.println("a < b");
        } else if (a1 > b1) {     // если нужно сделать много проверок
            System.out.println("a > b");
        } else {
            System.out.println("a = b");
        }

        // задача на сортировку

        a1 = 15;
        b1 = 7;
        c1 = 3;

        if (b1 < a1) {
            int temp = a1; // область видимости (scope) переменной temp - создана и существует внутри {}
            a1 = b1;
            b1 = temp; // алгоритм обмена
        }
        if (c1 < a1) {
            int temp = a1;
            a1 = c1;
            c1 = temp;
        }
        if (b1 > c1) {
            int temp = b1;
            b1 = c1;
            c1 = temp;
        }
        System.out.println(a1);
        System.out.println(b1);
        System.out.println(c1);

        // Логические операции

        if (a1 > b1) {
            if (a1 > c1) {
                System.out.println("a = max");
            }
        }

        a1 = 0;
        b1 = 3;
        c1 = 1;
        if (a1 > b1 && a1 > c1) { // && - логическое И, конъюнкция, логческое произведение
            System.out.println("a = max"); // && дает true, если все выражения true (сколько угодно)
        }

        if (a1 > b1 || a1 > c1) { // логическое ИЛИ, дизъюнкция, логическая сумма
            System.out.println("true"); // || дает true, если хоть одно true
        }

        // if (true && (true || false) && true) можно расставлять приоритеты
        // if (true && true || false && true) без скобочек выше приоритет у операции &&

        // для читаемости лучше использовать логические операции, а не вложенные if

        // ПРЕОБРАЗОВАНИЕ ТИПОВ

        int x;
        short sx = 5;

        x = sx; // НЕЯВНОЕ преобразование типов: приравнивание переменной одного типа переменной др типа
        // sx = x запрещено из-за диапазонов: short короче int
        // неявное преобразование работает для все целочисленных типов, НО с учетом диапазонов

        sx = (short) x; // ЯВНОЕ преобразование типов

        char ch = 'a';
        System.out.println((int)ch); // явное преобразование символа в число (из кода asci)

        /*
        Решение квадратных уравнений

        ax^2 + bx + c = 0

        if/else разные корни, комплексные числа
        1) Найти решение
        2) Пользователь вводит a, b, c
        3) Выводится ответ: x1 = 1, x2 = 2
        x = -3+4i (комплексные числа)

        4) Приведение типов
        5) Math библиотека (как подключить и использовать возможности)
           - возведение в степень
           - взятие квадратного корня

         */


    }
}
